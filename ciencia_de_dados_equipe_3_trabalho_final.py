# -*- coding: utf-8 -*-
"""Ciencia de Dados - Equipe 3 - Trabalho Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QvXCFLl6Jw6iUbSlnBia0aeZWY31XZxt

# **Match Prophet**

Riot Watcher: https://github.com/pseudonym117/Riot-Watcher

Documentação: https://riot-watcher.readthedocs.io/en/latest/
"""

import pandas as pd
from riotwatcher import LolWatcher

with open('../lol/key.txt', 'r') as f:
    key = f.read()

personal_auth_key = key

# api = "br1.api.riotgames.com"
region = "br1"

"""# Aplicação

Conseguir dados a partir de um determinado jogador
"""

# Definição geral do Wrapper
rw_personal = LolWatcher(personal_auth_key)


def get_histories(match, offset=0):
    all_players = match['info']['participants']

    blue_history = []
    red_history = []

    for player in all_players:

        if (player['teamId'] == 100):
            blue_history.append({'player_puuid': player['puuid'], 'matches': rw_personal.match_v5.matchlist_by_puuid(
                'AMERICAS', player['puuid'], start=offset+1, count=5)})
        else:
            red_history.append({'player_puuid': player['puuid'], 'matches': rw_personal.match_v5.matchlist_by_puuid(
                'AMERICAS', player['puuid'], start=offset+1, count=5)})

    return blue_history, red_history


def get_history_info(history_array):
    res = []

    for player in history_array:
        player_id = player['player_puuid']
        player_data = {
            'gold': 0,
            'kills': 0,
            'assists': 0,
            'deaths': 0, 
            'win': 0
        }
        for match in player['matches']:
            single_match = rw_personal.match_v5.by_id(
                'AMERICAS', match)['info']

            for participant in single_match['participants']:
                if participant['puuid'] == player_id:
                    player_data['gold'] += participant['goldEarned'] / (single_match['gameDuration'])
                    player_data['kills'] += participant['kills']
                    player_data['assists'] += participant['assists']
                    player_data['deaths'] += participant['deaths']
                    player_data['win'] += int(participant['win'])

                    # for team in single_match['teams']:
                    #     if team['teamId'] == participant['teamId']:
                    #         team = team['objectives']
                    #         player_data['towers'] = team['tower']['kills']
                    #         player_data['barons'] = team['baron']['kills']
                    #         player_data['dragons'] = team['dragon']['kills']
                    break

        res.append(player_data)
    return res


def get_mean(matches, team):
    team_goals = {
        f'{team}_gold': 0,
        f'{team}_kda': 0,
        f'{team}_win': 0,
        f'{team}_towers': 0,
        f'{team}_barons': 0,
        f'{team}_dragons': 0
    }

    for match in matches:
        team_goals[f'{team}_gold'] += match['gold']
        team_goals[f'{team}_kda'] += match['kda']
        team_goals[f'{team}_win'] += match['win']
        team_goals[f'{team}_towers'] += match['towers']
        team_goals[f'{team}_barons'] += match['barons']
        team_goals[f'{team}_dragons'] += match['dragons']

    for goal in team_goals:
        team_goals[goal] /= len(matches)

    return team_goals


def get_masteries(all_players, blue_team, red_team):

    champion_masteries = []
    for player in all_players:
        champion_masteries.append(rw_personal.champion_mastery.by_summoner_by_champion(
            region, player['summonerId'], player['championId'])['championPoints'])

    blue_mastery = 0
    red_mastery = 0

    for i, mastery in enumerate(champion_masteries):
        if (i <= 5):
            blue_mastery += mastery
        else:
            red_mastery += mastery

    blue_team['blue_mastery'] = blue_mastery
    red_team['red_mastery'] = red_mastery

    return blue_team, red_team

def get_features(team_data, team_name):
    team_features = {}
    for i, player_data in enumerate(team_data):
        for key, data in player_data.items():
            team_features[f'{team_name}_{i+1}_{key}'] = data
    return team_features

def get_match(match_id, player_id, offset=0):

    match = rw_personal.match_v5.by_id('AMERICAS', match_id)

    blue_history, red_history = get_histories(match, offset)

    blue_match_data = get_history_info(blue_history)
    red_match_data = get_history_info(red_history)

    # blue_mean = get_mean(blue_match_data, 'blue')
    # red_mean = get_mean(red_match_data, 'red')
    # blue_team_features, red_team_features = get_masteries(
    #     match['info']['participants'], blue_mean, red_mean)
    blue_team_features = get_features(blue_match_data, 'blue')
    red_team_features = get_features(red_match_data, 'red')
    
    features = {**blue_team_features, **red_team_features}

    for participant in match['info']['participants']:
        if participant['puuid'] == player_id:
            features['win'] = int(participant['win'])
            features['teamId'] = participant['teamId']
            break
    features['id'] = match_id
    return features


def main():
    with open('../lol/nicks.txt', 'r') as f:
        nicks = (f.read())

    nicks = [nick.strip() for nick in nicks.split('\n')]

    dataset = []

    for i, nick in enumerate(nicks):
        try:
            player = rw_personal.summoner.by_name(region, nick)
            player_puuid = player['puuid']
            matches_list = rw_personal.match_v5.matchlist_by_puuid(
                'AMERICAS', player_puuid, start=0, count=10)

            for i, match in enumerate(matches_list):
                try:
                    dataset_item = get_match(match, player_puuid, offset=i)
                    dataset.append(dataset_item)
                    df = pd.DataFrame(dataset, columns=dataset_item.keys())
                    df.set_index('id')
                    df.to_csv("../lol/data.csv")
                except Exception as e:
                    print(e)
        except Exception as e:
            print(e)

if __name__ == '__main__':
    main()